"use strict";
console.log('====    Завдання функції JS    ====');
// Корисні скорочення:
function numTask(numUserinput) {
    return console.log(`*** \tЗавдання # ${numUserinput}\t***`);
}
function tskOk() {
    return console.log(`Правильно тут все`);
}
function tskF() {
    return console.log(`!!! Помилка у завданні !!!`);
}
// Завдання 1
numTask(1);

// Що буде виведено перше в консоль?
function showName() {
    // console.log('Всиль Стус'); // одразу після виконання поточного коду, тобто після всього коду.
}
setTimeout(showName, 0);
console.log('Микола Лисенко'); // ! це буде виведено в консоль першим 
// через затримку часу  https://learn.javascript.ru/settimeout-setinterval#:~:text=%D0%9E%D1%81%D0%BE%D0%B1%D0%BB%D0%B8%D0%B2%D0%B8%D0%B9%20%D0%B2%D0%B0%D1%80%D1%96%D0%B0%D0%BD%D1%82%20%D0%B2%D0%B8%D0%BA%D0%BE%D1%80%D0%B8%D1%81%D1%82%D0%B0%D0%BD%D0%BD%D1%8F%3A,%D0%BF%D1%96%D1%81%D0%BB%D1%8F%20%D0%B2%D0%B8%D0%BA%D0%BE%D0%BD%D0%B0%D0%BD%D0%BD%D1%8F%20%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%BA%D0%BE%D0%B4%D1%83.
// 'Особливий варіант використання: setTimeout(func, 0) 
// або просто setTimeout(func).
// Це планує виклик funcнастільки швидко, наскільки це можливо.
// Але планувальник викликатиме функцію лише після завершення 
// виконання поточного коду. 





// Завдання 2
numTask(2);
tskOk();
// Чи правильно викликана функція ?
showMessage(); //! функція в області видимості 
function showMessage() {
    console.log('Повідомлення');
}
// < ! ми в строгому режимі >,
// об'явлену таким чином функцію можна викликати з будь-якого місця в коді.





// Завдання 3
numTask(3);
tskF();
// Чи правильно викликана функція ?
// showMessageThree();
let showMessageThree = function () { //! функціональний вираз !
    console.log('Повідомлення');
}
// < ! ми в строгому режимі >,
// При виконанні функціонального виразу; змінній присвоюється функція,
// а це значить що до прочитання компілятором/інтерпритатором це все ще змінна,
// до якої неможливо звернутися до її оголошення (область видимості). 
// об'явлену таким чином функцію можна викликати тільки після
// оголошення функціонального виразу.

// Завдання 4
numTask(4);
tskF();
// "use strict";
let showMessageFour;
if (2 > 1) {
    showMessageFour = function showMessageFour() {
        console.log('Повідомлення вкладеної функції 4 завдання');
    }
}
showMessageFour(); //дана функція (по за зоною досягнення) не в області видимості,
//  адже розташована всередині JS блоку , де в строгому режимі: по за межами JS блоку
//  змінні та функції, що створені всередині цього блоку не існують.
//! Вирішення 1) оголосити змінну із еквівалентним функції іменем перед JS блоком
//! 2) в середині JS блоку присвоїти однойменній змінній функцію
